/* 
 * Copyright Notice 
 * 
 * COPYRIGHTÂ© 2021 Build 82. All rights reserved. No part of this software
 * and constituent code may be reproduced in any form, including video recording, 
 * photocopying, downloading, broadcasting or transmission electronically, without 
 * prior written consent of Build 82. Copyright protection includes output
 * generated by this software as displayed in print or in digital form, such as 
 * icons, interfaces, and the like.
 * 
 * Content Warranty 
 * 
 * The information in this document is subject to change without notice. THIS 
 * DOCUMENT IS PROVIDED "AS IS" AND BUILD 82 MAKES NO WARRANTY, EXPRESS, 
 * IMPLIED, OR STATUTORY, INCLUDING BUT NOT LIMITED TO ALL WARRANTIES OF 
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT. 
 * Build 82 shall not be liable for errors contained herein or for 
 * incidental or consequential damages in connection with the furnishing, 
 * performance or use of this material.
 */

define([
	'dojo/dom',
	'dojo/dom-construct',
	'dojo/on',
	'dojo/topic',
	'build82/config'
	], 
    function(dom, domConstruct, on, topic, Config) {
		var config = {
			historyID_str: 'container-history',
			historyLength_int: 100,
			historyTemplate: '<i title="#COUNT# - #TITLE#" class="rasha #MARKED#" data-type="#TYPE#" data-order="#ORDER#" data-index="#INDEX#" style="color:#COLOR#;"><span class="count">#COUNT#</span><i class="material-icons">#ICON#</i></i>',	
		},
		static = {
			history: []
		},
				
		append = function(param_selection) {
			for(var orb in param_selection) {
				update({
					type:param_selection[orb],
					order: orb,
					marked: false
				});
			}
			
			trim();
		},
				
		update = function(param_rasha) {
			static.history.push(param_rasha);
			topic.publish(Config.Topic.Rasha, 'calculate', {rasha:param_rasha});
			domConstruct.place(rashaFactory_History(param_rasha), config.historyID_str, 'last');
			scroll();
		},
				
		scroll = function() {
			var history = document.getElementById(config.historyID_str);
			history.scrollLeft = history.scrollWidth;
		},
		
		trim = function() {
			var history = dom.byId(config.historyID_str);
			if(history.childElementCount > config.historyLength_int) {
				history.removeChild(history.firstChild);
			}
		},
				
		toggleMark = function(param_index) {
			static.history[param_index].marked = !static.history[param_index].marked;
			return static.history[param_index];
		},
				
		rashaFactory_History = function(param_history) {
			var index_int = static.history.indexOf(param_history);
			
			return config.historyTemplate.
				replace('#TYPE#', param_history.type).
				replace('#TITLE#', Config.Rasha[param_history.type].name).
				replace('#ICON#', Config.Rasha[param_history.type].icon).
				replace('#COLOR#', Config.Rasha[param_history.type].color).
				replace('#COUNT#', index_int + 1).
				replace('#COUNT#', index_int + 1).
				replace('#MARKED#', param_history.marked ? 'marked' : '').
				replace('#INDEX#', index_int).
				replace('#ORDER#', param_history.order);
		};
			
		return {
			Init: function(param_data) {
				static.history = param_data;
				
				domConstruct.empty(config.historyID_str);
				var start = Math.max(0, static.history.length - config.historyLength_int);
				var history = static.history.slice(start, static.history.length);

				// add elements
				for(var rasha in history) {
					domConstruct.place(rashaFactory_History(history[rasha]), config.historyID_str, 'last');
				}

				scroll();
			},
			Mark: toggleMark,
			Trim: trim,
			Add: append,
			Get: function() {
				return static.history;
			}
		};
	}
);