/* 
 * Copyright Notice 
 * 
 * COPYRIGHTÂ© 2021 Build 82. All rights reserved. No part of this software
 * and constituent code may be reproduced in any form, including video recording, 
 * photocopying, downloading, broadcasting or transmission electronically, without 
 * prior written consent of Build 82. Copyright protection includes output
 * generated by this software as displayed in print or in digital form, such as 
 * icons, interfaces, and the like. 
 * 
 * Content Warranty 
 * 
 * The information in this document is subject to change without notice. THIS 
 * DOCUMENT IS PROVIDED "AS IS" AND BUILD 82 MAKES NO WARRANTY, EXPRESS, 
 * IMPLIED, OR STATUTORY, INCLUDING BUT NOT LIMITED TO ALL WARRANTIES OF 
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT. 
 * Build 82 shall not be liable for errors contained herein or for 
 * incidental or consequential damages in connection with the furnishing, 
 * performance or use of this material.
 */

define(['dojo/_base/declare',
	'dojo/_base/lang',
	'dojo/dom-construct',
	'dijit/_Widget', 
	'dijit/_Templated',
	'build82/d3'
	], 
    function(declare, lang, domConstruct, _Widget, _Templated, d3) {
		var draw = function() {
			var self = this;
			domConstruct.empty(this.chartNode);
			this.svg = d3.select(this.chartNode).append('svg').attr('viewBox', [0, 0, this.width, this.height]);
				
			this.x = d3.scaleLinear()
				.domain(determineDomain(this.data, this.xDomain, this.xDomainDefault)).nice()
				.range([this.margin.left, this.width - this.margin.right]);
			this.y = d3.scaleBand()
				.domain(this.data.map(d => self.format.title(d.name)))
				.range([this.height - this.margin.bottom, this.margin.top])
				.padding(0.1);

			this.xAxis = g => g
				.attr('class', 'xAxis')
				.attr('transform', `translate(0,${this.height - this.margin.bottom})`)
				.call(d3.axisBottom(this.x))
				.call(g => g.select('.domain').remove());
			this.yAxis = g => g
				.attr('class', 'yAxis')
				.attr('transform', `translate(${this.margin.left},0)`)
				.call(d3.axisLeft(this.y).tickSize(0).tickSizeOuter(0).tickPadding(10));
				
			this.bar = this.svg.append('g')
				.selectAll('rect')
				.data(this.data)
				.join('rect')
				.style('mix-blend-mode', 'multiply')
				.attr('fill', d => self.color(d.name))
				.attr('x', this.x(0))
				.attr('y', d => self.y(self.format.title(d.name)))
				.attr('height', this.y.bandwidth())
				.attr('width', d => self.x(d.value) - self.x(0));
		
			this.bar
				.append('title')
				.text(d => `${self.format.tooltip(d.name)} ${self.format.value(d.value)}`);

			this.gx = this.svg.append('g').call(this.xAxis);
			this.gy = this.svg.append('g').call(this.yAxis);
		},
				
		determineDomain = function(param_data, param_domain, param_default) {
			// no data
			if(param_data.map(d=>d.value).reduce((p,c)=>p+c) === 0) {
				return param_default || param_domain || [0, 0];
			}

			return param_domain || [0, d3.max(param_data, d => d.value)];
		},
				
		updateChart = function(param_obj) {
			var self = this;
			if(param_obj.data !== undefined) {
				this.color = param_obj.data.length !== this.data.length ? d3.scaleOrdinal(this.colors) : this.color;
				this.data = this.compute(param_obj.data);
			}
			if(param_obj.sort) {
				this.y.domain(this.data.sort(param_obj.order).map(d => d.name));
			}

			const t = this.svg.transition().duration(750);

			this.x.domain(determineDomain(this.data, this.xDomain, this.xDomainDefault)).nice()
				.range([this.margin.left, this.width - this.margin.right]);

			this.bar.data(this.data)
				.join('rect')
				.transition(t)
				.attr('fill', d => self.color(d.name))
				.attr('width', d => self.x(d.value) - self.x(0));

			this.bar
				.select('title')
				.text(d => `${self.format.tooltip(d.name)} ${self.format.value(d.value)}`);
		
			this.bar.data(this.data, d => d.name)
				.order()
				.transition(t)
				.delay((d, i) => i * 20)
				.attr('y', d => self.y(self.format.title(d.name)));

			this.gy.transition(t)
				.call(this.yAxis)
				.selectAll('.tick');

			this.gx.transition(t)
				.call(this.xAxis)
				.selectAll('.tick');
		};
		
		return declare([_Widget, _Templated], {
			baseClass: 'chart-d3-bar-horiz',
			chartNode: null,
			width: 500,
			height: 500,
			data: null,
			margin: {top: 20, right: 20, bottom: 30, left: 40},
			svg: null,
			bar: null,
			colors: null,
			color: null,
			x: null,
			y: null,
			gx: null,
			gy: null,
			xAxis: null,
			yAxis: null,
			xDomain: null,
			xDomainDefault: null,
			format: {
				title: t => t,
				tooltip: t => t,
				value: t => t
			},
			templateString: '<div data-dojo-attach-point="chartNode"></div>',
			compute: function(param_data) {
				return param_data;
			},
			postCreate: function() {
				this.inherited(arguments);

				this.colors = this.colors === null ? d3.schemeTableau10 : this.colors;
				this.color = d3.scaleOrdinal(this.colors);
				this.data = this.compute(this.data);
				lang.hitch(this, draw)();
			},
			redraw: function(param_height, param_width) {
				this.height = param_height;
				this.width = param_width;
				
				lang.hitch(this, draw)();
			},
			update: updateChart
		});
	}
);
